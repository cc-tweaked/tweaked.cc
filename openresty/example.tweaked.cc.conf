default_type 'text/plain';

location = / {
  content_by_lua_block {
    ngx.say("HTTP is working!")
  }
}

location = /post {
  client_max_body_size 32k;

  # Echos back the request's body.
  content_by_lua_block {
    ngx.req.read_body()

    local data = ngx.req.get_body_data()
    if data then
      ngx.print(data)
      return
    end

    local file = ngx.req.get_body_file()
    if file then
      local handle = io.open(file, "r")
      if handle then
        while true do
          local contents = handle:read(2048)
          if not contents then break end
          ngx.print(contents)
        end

        return
      end
    end

    ngx.say("No data sent")
  }
}

location = /echo {
  lua_check_client_abort on;
  lua_socket_log_errors off;

  # A basic websocket echo server. Will additionally close the websocket when
  # receiving "please close".
  content_by_lua_block {
    local ws = require "websocket"
    ws(function(ws, data, typ)
      if typ == "text" then
        if data == "please close" then
          ws.open = false
          return true
        else
          return ws:send_text(data)
        end
      elseif typ == "binary" then
        return ws:send_binary(data)
      else
        return nil, "Unknown type " .. typ
      end
    end)
  }
}

location @not_found {
  # Yes, it's easier to write a Lua script to do this than actually add a text
  # file.
  content_by_lua_block {
    ngx.say("404 Not found")
  }
}

error_page 404 @not_found;
